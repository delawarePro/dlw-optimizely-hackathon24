import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentType(client: GraphQLClient, variables: Types.getContentTypeQueryVariables) : Promise<Types.getContentTypeQuery>
{
  const query = gql`query getContentType($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items { _metadata { types } } } }`
  return client.request<Types.getContentTypeQuery, Types.getContentTypeQueryVariables>(query, variables)
}
export function getContentByPath(client: GraphQLClient, variables: Types.getContentByPathQueryVariables) : Promise<Types.getContentByPathQuery>
{
  const query = gql`query getContentByPath($path: String!, $version: String, $locale: [Locales!], $domain: String) { content: _Content( where: {_metadata: {url: {default: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}} locale: $locale ) { total items { ...PageData } } } fragment PageData on _IContent { ...IContentData ...BlankExperienceData ...CampaignPageData ...HomePageData } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment BlankExperienceData on BlankExperience { ...ExperienceData } fragment CampaignPageData on CampaignPage { Title Content { ...BlockData } ...ExperienceData } fragment HomePageData on HomePage { ...ExperienceData } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkData on ContentUrl { base hierarchical default } fragment ExperienceData on _IExperience { composition { ...CompositionData } } fragment CompositionData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } ... on ICompositionStructureNode { nodes @recursive(depth: 10) { name: displayName } } ... on ICompositionElementNode { element { ...ElementData } } } fragment ElementData on _IElement { ...IElementData ...WebEssentialBannerData ...WebEssentialCallToActionData ...WebEssentialImageData ...WebEssentialQuoteData ...WebEssentialRichTextData ...WebEssentialRichTextMediaData } fragment IElementData on _IElement { _metadata { ...IContentInfo } _type: __typename } fragment WebEssentialBannerData on WebEssentialBanner { Title Description { json html } } fragment WebEssentialCallToActionData on WebEssentialCallToAction { Label Link { ...LinkData } } fragment WebEssentialImageData on WebEssentialImage { Image { ...LinkData } } fragment WebEssentialQuoteData on WebEssentialQuote { Author Text { json html } Image { ...LinkData } } fragment WebEssentialRichTextData on WebEssentialRichText { Content { json html } } fragment WebEssentialRichTextMediaData on WebEssentialRichTextMedia { Content { json html } Media { ...LinkData } Reverse } fragment BlockData on _IContent { ...IContentData ...PokemonData } fragment PokemonData on Pokemon { Identifier Name Thumbnail { ...ReferenceData } Species Types Attack Height HP Speed Weight } fragment ReferenceData on ContentReference { key url { ...LinkData } }`
  return client.request<Types.getContentByPathQuery, Types.getContentByPathQueryVariables>(query, variables)
}
export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items { ...BlockData ...PageData } } } fragment PageData on _IContent { ...IContentData ...BlankExperienceData ...CampaignPageData ...HomePageData } fragment BlockData on _IContent { ...IContentData ...PokemonData } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment BlankExperienceData on BlankExperience { ...ExperienceData } fragment CampaignPageData on CampaignPage { Title Content { ...BlockData } ...ExperienceData } fragment HomePageData on HomePage { ...ExperienceData } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkData on ContentUrl { base hierarchical default } fragment ExperienceData on _IExperience { composition { ...CompositionData } } fragment CompositionData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } ... on ICompositionStructureNode { nodes @recursive(depth: 10) { name: displayName } } ... on ICompositionElementNode { element { ...ElementData } } } fragment ElementData on _IElement { ...IElementData ...WebEssentialBannerData ...WebEssentialCallToActionData ...WebEssentialImageData ...WebEssentialQuoteData ...WebEssentialRichTextData ...WebEssentialRichTextMediaData } fragment IElementData on _IElement { _metadata { ...IContentInfo } _type: __typename } fragment WebEssentialBannerData on WebEssentialBanner { Title Description { json html } } fragment WebEssentialCallToActionData on WebEssentialCallToAction { Label Link { ...LinkData } } fragment WebEssentialImageData on WebEssentialImage { Image { ...LinkData } } fragment WebEssentialQuoteData on WebEssentialQuote { Author Text { json html } Image { ...LinkData } } fragment WebEssentialRichTextData on WebEssentialRichText { Content { json html } } fragment WebEssentialRichTextMediaData on WebEssentialRichTextMedia { Content { json html } Media { ...LinkData } Reverse } fragment PokemonData on Pokemon { Identifier Name Thumbnail { ...ReferenceData } Species Types Attack Height HP Speed Weight } fragment ReferenceData on ContentReference { key url { ...LinkData } }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}

